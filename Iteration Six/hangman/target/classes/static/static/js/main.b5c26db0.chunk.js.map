{"version":3,"sources":["service/GameService.js","component/GameComponent.js","service/UserService.js","component/HomeComponent.js","service/WordService.js","component/WordComponent.js","component/RankComponent.js","service/RankService.js","component/RankTopTen.js","component/RankTopMonth.js","component/WinComponent.js","component/GameOverComponent.js","App.js","reportWebVitals.js","index.js"],"names":["fetch","method","headers","Accept","then","res","json","id","response","letter","GameComponent","props","state","game","usedLetters","currentLetters","this","fetchData","gameId","match","params","console","log","GameService","getGameById","setState","getCurrentGameAlphabet","getUsedLetters","updateGame","tries","history","push","undefined","currentWord","hiddenWord","checkGame","class","align","hidden","word","map","e","onClick","type","href","Component","userBy","username","userId","email","password","HomeComponent","user","UserService","getAuthUser","postGame","rest","text","className","createGame","page","wordName","level","data","WordComponent","words","pageCount","remove","bind","WordService","getWordsByPage","deleteWord","updatedWords","filter","i","event","target","value","postWord","pages","data-gr-c-s-loaded","for","onChange","name","createWord","levelDifficulty","size","color","wordId","renderPages","RankComponent","RankTopTen","rank","RankService","getRankTopTen","r","score","date","RankTopMonth","getRankTopMonth","WinComponent","action","GameOverComponent","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5c26db0.chunk.js","sourcesContent":["const getAllGames = \"http://localhost:8080/hangman/api/v1/games\";\r\nconst getGameById = \"http://localhost:8080/hangman/api/v1/games/\";\r\nconst postGame = \"http://localhost:8080/hangman/api/v1/games\";\r\nconst updateGame = \"http://localhost:8080/hangman/api/v1/games/\";\r\nconst getAlphabet = \"http://localhost:8080/hangman/api/v1/alphabet/\";\r\nconst getUsedLetters = \"http://localhost:8080/hangman/api/v1/games/letters/\";\r\n\r\nclass GameService {\r\n  getAllGames() {\r\n    return fetch(getAllGames, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => res.json());\r\n  }\r\n\r\n  getGameById(id) {\r\n    return fetch(getGameById + id).then((response) => response.json());\r\n  }\r\n\r\n  getCurrentGameAlphabet(id) {\r\n    return fetch(getAlphabet + id).then((response) => response.json());\r\n  }\r\n\r\n  getUsedLetters(id) {\r\n    return fetch(getUsedLetters + id).then((response) => response.json());\r\n  }\r\n\r\n  postGame() {\r\n    return fetch(postGame, {\r\n      method: \"POST\",\r\n    });\r\n  }\r\n\r\n  updateGame(id, letter) {\r\n    return fetch(updateGame + id + `?letter=${letter}`, {\r\n      method: \"PUT\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default new GameService();\r\n","import React, { Component } from \"react\";\r\nimport GameService from \"../service/GameService\";\r\nimport \"../css/position.css\";\r\n\r\nclass GameComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      usedLetters: [],\r\n      currentLetters: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData() {\r\n    const gameId = this.props.match.params.gameId;\r\n    console.log(gameId);\r\n    GameService.getGameById(gameId).then((game) => {\r\n      this.setState({ game });\r\n    });\r\n\r\n    GameService.getCurrentGameAlphabet(\r\n      this.props.match.params.gameId\r\n    ).then((currentLetters) => this.setState({ currentLetters }));\r\n\r\n    GameService.getUsedLetters(\r\n      this.props.match.params.gameId\r\n    ).then((usedLetters) => this.setState({ usedLetters }));\r\n  }\r\n\r\n  updateGame(letter) {\r\n    GameService.updateGame(this.props.match.params.gameId, letter).then(() =>\r\n      this.fetchData()\r\n    );\r\n  }\r\n\r\n  checkGame() {\r\n    if (this.state.game.tries <= 0) {\r\n      this.props.history.push(\r\n        `/hangman/games/${this.props.match.params.gameId}/gameover`\r\n      );\r\n    }\r\n    if (\r\n      this.state.game.currentWord !== undefined &&\r\n      this.state.game.hiddenWord !== undefined\r\n    ) {\r\n      if (this.state.game.currentWord === this.state.game.hiddenWord) {\r\n        console.log(this.state.game.currentWord);\r\n        console.log(this.state.game.hiddenWord);\r\n        this.props.history.push(\r\n          `/hangman/games/${this.props.match.params.gameId}/win`\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    this.checkGame();\r\n\r\n    return (\r\n      <body class=\"html\">\r\n        <form method=\"post\">\r\n          <div class=\"cover-container d-flex w-100 h-50 p-3 mx-auto flex-column\">\r\n            <h2 id=\"titleId\" align=\"center\">\r\n              Hangman Game\r\n            </h2>\r\n            <br />\r\n            <h3 align=\"center\">{this.state.game.hiddenWord}</h3>\r\n            <h3 id=\"secret\" hidden=\"true\" align=\"center\">\r\n              {this.state.word}\r\n            </h3>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <h3>Used letters: {this.state.usedLetters}</h3>\r\n            <h3>Number tries remaining: {this.state.game.tries}</h3>\r\n            <div>\r\n              {this.state.currentLetters.map((e) => (\r\n                <button\r\n                  onClick={() => this.updateGame(e)}\r\n                  key={e}\r\n                  class=\"btn btn-lg btn-secondary\"\r\n                  type=\"button\"\r\n                >\r\n                  {e}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            <br />\r\n            <br />\r\n          </div>\r\n        </form>\r\n        <div\r\n          class=\"html\"\r\n          class=\"cover-container w-10 h-50 p-3 mx-auto flex-column\"\r\n        >\r\n          <a id=\"backHome\" class=\"btn btn-lg btn-secondary\" href=\"/hangman\">\r\n            Back\r\n          </a>\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameComponent;\r\n","const users = \"http://localhost:8080/hangman/api/v1/users\";\r\nconst userBy = \"http://localhost:8080/hangman/api/v1/users/\";\r\nconst userAuth = \"http://localhost:8080/hangman/api/v1/users/auth\";\r\nconst createUser = \"http://localhost:8080/hangman/api/v1/users\";\r\nconst updateUser = \"http://localhost:8080/hangman/api/v1/users/\";\r\nclass UserService {\r\n  getAllUsers() {\r\n    return fetch(users, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => res.json());\r\n  }\r\n\r\n  getAuthUser() {\r\n    return fetch(userAuth).then((res) => res.json());\r\n  }\r\n\r\n  getUserByName(username) {\r\n    return fetch(userBy + `${username}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => res.json());\r\n  }\r\n\r\n  getUserById(userId) {\r\n    return fetch(userBy + `${userId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => res.json());\r\n  }\r\n\r\n  postGame(username, email, password) {\r\n    return fetch(\r\n      createUser + `?username=${username}&email=${email}&password=${password}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  postUser(gameId, username, email, password) {\r\n    return fetch(\r\n      updateUser +\r\n        gameId +\r\n        `?username=${username}&email=${email}&password=${password}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteUser(gameId) {\r\n    return fetch(userBy + gameId, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default new UserService();\r\n","import React, { Component } from \"react\";\r\nimport GameService from \"../service/GameService\";\r\nimport UserService from \"../service/UserService\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"../css/position.css\";\r\nimport \"../css/navbar.css\";\r\n\r\nclass HomeComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      username: \" \",\r\n      gameId: \"\",\r\n    };\r\n    //this.createGame = this.createGame.bind(this);\r\n    // this.id = \"\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    UserService.getAuthUser().then((res) => this.setState({ user: res }));\r\n  }\r\n\r\n  // onChange(event) {\r\n  //   this.setState({ username: event.target.value });\r\n  // }\r\n\r\n  createGame() {\r\n    GameService.postGame()\r\n      .then((rest) => rest.text())\r\n      .then((rest) => this.props.history.push(`/hangman/games/${rest}`));\r\n    // .then((res) => this.setState({ gameId: res }));\r\n    //.then(this.props.history.push(`/hangman/games/${this.state.gameId}`));\r\n  }\r\n\r\n  // getIdGame() {\r\n  //   return this.state.gameId;\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <body>\r\n        <ul>\r\n          <li class=\"active\">\r\n            <a href=\"/hangman\">Home</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/hangman/logout\">Logout</a>\r\n          </li>\r\n          {/* <li>\r\n            <a href=\"/hangman/registration\">Registration</a>\r\n          </li> */}\r\n        </ul>\r\n\r\n        {console.log(this.props)}\r\n\r\n        <form class=\"html\" method=\"post\">\r\n          <div className=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\r\n            <h1>Welcome to my Hangman game!</h1>\r\n            <hr />\r\n            {/* <label for=\"nameImput\">\r\n              Enter username:{\" \"}\r\n              <input\r\n                value={this.state.username}\r\n                onChange={(event) =>\r\n                  this.setState({ username: event.target.value })\r\n                }\r\n                type=\"text\"\r\n                id=\"usernameInput\"\r\n                name=\"username\"\r\n              ></input>\r\n            </label> */}\r\n            <button\r\n              onClick={() => this.createGame()}\r\n              id=\"buttonGame\"\r\n              className=\"btn btn-lg btn-secondary\"\r\n              type=\"button\"\r\n            >\r\n              New Game\r\n            </button>\r\n            <br />\r\n            <br />\r\n            <a className=\"btn btn-lg btn-secondary\" href=\"/hangman/rank\">\r\n              Rank\r\n            </a>\r\n            <br />\r\n            <a className=\"btn btn-lg btn-secondary\" href=\"/hangman/words\">\r\n              Words\r\n            </a>\r\n          </div>\r\n        </form>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeComponent;\r\n","const getWordsByPage = \"http://localhost:8080/hangman/api/v1/words\";\r\nconst deleteWord = \"http://localhost:8080/hangman/api/v1/words/\";\r\nconst postWord = \"http://localhost:8080/hangman/api/v1/words\";\r\n\r\nclass WordService {\r\n  getWordsByPage(page) {\r\n    return fetch(getWordsByPage + `?page=${page}`).then((res) => res.json());\r\n  }\r\n\r\n  postWord(wordName, level) {\r\n    return fetch(postWord + `?wordName=${wordName}&level=${level}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n  }\r\n\r\n  deleteWord(data) {\r\n    return fetch(deleteWord + `/${data}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default new WordService();\r\n","import React, { Component } from \"react\";\r\nimport WordService from \"../service/WordService\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { queryString } from \"querystring\";\r\n\r\nclass WordComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      words: [],\r\n      wordName: \"\",\r\n      level: \"\",\r\n      page: 1,\r\n      pageCount: 0,\r\n    };\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    WordService.getWordsByPage(this.state.page).then(({ words, pageCount }) => {\r\n      this.setState({ words, pageCount });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    WordService.getWordsByPage(this.state.page).then(({ words, pageCount }) => {\r\n      this.setState({ words, pageCount });\r\n    });\r\n  }\r\n\r\n  remove(wordName) {\r\n    WordService.deleteWord(wordName).then(() => {\r\n      let updatedWords = [...this.state.words].filter(\r\n        (i) => i.wordName !== wordName\r\n      );\r\n      this.setState({ words: updatedWords });\r\n    });\r\n  }\r\n\r\n  onChange(event) {\r\n    this.setState({ wordName: event.target.value, level: event.target.value });\r\n  }\r\n\r\n  createWord() {\r\n    WordService.postWord(this.state.wordName, this.state.level);\r\n  }\r\n\r\n  renderPages() {\r\n    const pages = [];\r\n    for (let i = 1; i <= this.state.pageCount; i++) {\r\n      pages.push(\r\n        <li class=\"page-item\">\r\n          {/* <a\r\n            href={`/hangman/words?page=${i}`}\r\n            class=\"page-link\"\r\n            onClick={() => this.setState({ page: i })}\r\n          >\r\n            {i}\r\n          </a> */}\r\n          <button\r\n            class=\"page-link\"\r\n            onClick={() => this.setState({ page: i })}\r\n            type=\"button\"\r\n          >\r\n            {i}\r\n          </button>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <body class=\"text-center\" data-gr-c-s-loaded=\"true\">\r\n        <form method=\"get\">\r\n          <label for=\"wordnameImput\">\r\n            Enter word:\r\n            <input\r\n              value={this.state.wordName}\r\n              onChange={(event) =>\r\n                this.setState({ wordName: event.target.value })\r\n              }\r\n              type=\"text\"\r\n              id=\"wordNameInput\"\r\n              name=\"wordName\"\r\n            ></input>\r\n          </label>\r\n          <label for=\"levelImput\">\r\n            Level of Difficulty:\r\n            <input\r\n              value={this.state.level}\r\n              onChange={(event) => this.setState({ level: event.target.value })}\r\n              type=\"text\"\r\n              id=\"levelInput\"\r\n              name=\"level\"\r\n            ></input>\r\n          </label>\r\n          <button\r\n            onClick={() => this.createWord()}\r\n            id=\"addWord\"\r\n            class=\"btn btn-lg btn-secondary\"\r\n            type=\"submit\"\r\n          >\r\n            Add Word\r\n          </button>\r\n        </form>\r\n        <div class=\"row justify-content-center\">\r\n          <div class=\"col-auto\">\r\n            <table class=\"table table-striped table-hover\">\r\n              <thead class=\"thead-light\">\r\n                <tr>\r\n                  <th>Word</th>\r\n                  <th>Level</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.words &&\r\n                  this.state.words.map((word) => (\r\n                    <tr key={word.wordId}>\r\n                      <td>{word.wordName}</td>\r\n                      <td>{word.levelDifficulty}</td>\r\n                      <td>\r\n                        <button\r\n                          size=\"sm\"\r\n                          color=\"danger\"\r\n                          onClick={() => this.remove(word.wordName)}\r\n                        >\r\n                          Delete\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n            <ul class=\"pagination pagination-lg\">{this.renderPages()}</ul>\r\n          </div>\r\n        </div>\r\n\r\n        <a class=\"btn btn-lg btn-secondary\" href=\"/hangman\">\r\n          Back\r\n        </a>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordComponent;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/position.css\";\r\nimport \"../css/navbar.css\";\r\nclass RankComponent extends Component {\r\n  render() {\r\n    return (\r\n      <body class=\"text-center\" data-gr-c-s-loaded=\"true\">\r\n        <form class=\"html\">\r\n          <nav class=\"navbar navbar-expand-sm bg-light navbar-white\">\r\n            <div>\r\n              <ul class=\"navbar-nav\">\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link\" href=\"/hangman/rank/topTen\">\r\n                    Top10\r\n                  </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link\" href=\"/hangman/rank/topMonth\">\r\n                    Month Rank\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        </form>\r\n        <a class=\"btn btn-lg btn-secondary\" href=\"/hangman\">\r\n          Back\r\n        </a>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RankComponent;\r\n","const getRankTopTen = \"http://localhost:8080/hangman/api/v1/rank/topTen\";\r\nconst getRankTopMonth = \"http://localhost:8080/hangman/api/v1/rank/topMonth\";\r\n\r\nclass RankService {\r\n  getRankTopTen() {\r\n    return fetch(getRankTopTen, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => res.json());\r\n  }\r\n\r\n  getRankTopMonth() {\r\n    return fetch(getRankTopMonth, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((res) => res.json());\r\n  }\r\n}\r\n\r\nexport default new RankService();\r\n","import { Component } from \"react\";\r\nimport RankService from \"../service/RankService\";\r\n\r\nclass RankTopTen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rank: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    RankService.getRankTopTen().then((res) => this.setState({ rank: res }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-auto\">\r\n          <table class=\"table table-striped table-hover\">\r\n            <thead class=\"thead-light\">\r\n              <tr>\r\n                <th>Username</th>\r\n                <th>Word</th>\r\n                <th>Score</th>\r\n                <th>Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.rank &&\r\n                this.state.rank.map((r) => (\r\n                  <tr key={r.id}>\r\n                    <td>{r.username}</td>\r\n                    <td>{r.word}</td>\r\n                    <td>{r.score}</td>\r\n                    <td>{r.date}</td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n          <a class=\"btn btn-lg btn-secondary\" href=\"/hangman/rank\">\r\n            Back\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RankTopTen;\r\n","import { Component } from \"react\";\r\nimport RankService from \"../service/RankService\";\r\n\r\nclass RankTopMonth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rank: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    RankService.getRankTopMonth().then((res) => this.setState({ rank: res }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-auto\">\r\n          <table class=\"table table-striped table-hover\">\r\n            <thead class=\"thead-light\">\r\n              <tr>\r\n                <th>Username</th>\r\n                <th>Word</th>\r\n                <th>Score</th>\r\n                <th>Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.rank &&\r\n                this.state.rank.map((r) => (\r\n                  <tr key={r.id}>\r\n                    <td>{r.username}</td>\r\n                    <td>{r.word}</td>\r\n                    <td>{r.score}</td>\r\n                    <td>{r.date}</td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n          <a class=\"btn btn-lg btn-secondary\" href=\"/hangman/rank\">\r\n            Back\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RankTopMonth;\r\n","import React, { Component } from \"react\";\r\nimport GameService from \"../service/GameService\";\r\nimport \"../css/position.css\";\r\nclass WinComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const gameId = this.props.match.params.gameId;\r\n    GameService.getGameById(gameId).then((game) => {\r\n      this.setState({ game });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <body class=\"html\" class=\"text-center\" data-gr-c-s-loaded=\"true\">\r\n        <h2>Hangman Game</h2>\r\n        <form method=\"post\" action=\"/hangman/win\">\r\n          <div class=\"cover-container d-flex w-100 h-30 p-3 mx-auto flex-column\">\r\n            <h1>You win!</h1>\r\n            <h2>{this.state.game.currentWord}</h2>\r\n          </div>\r\n        </form>\r\n        <a class=\"btn btn-lg btn-secondary\" href=\"/hangman\">\r\n          Back\r\n        </a>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WinComponent;\r\n","import React, { Component } from \"react\";\r\nimport GameService from \"../service/GameService\";\r\nimport \"../css/position.css\";\r\n\r\nclass GameOverComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const gameId = this.props.match.params.gameId;\r\n    GameService.getGameById(gameId).then((game) => {\r\n      this.setState({ game });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <body class=\"html\" class=\"text-center\" data-gr-c-s-loaded=\"true\">\r\n        <h2>Hangman Game</h2>\r\n        <form method=\"post\" action=\"/hangman/win\">\r\n          <div class=\"cover-container d-flex w-100 h-30 p-3 mx-auto flex-column\">\r\n            <h1>You lose!</h1>\r\n            <h2>{this.state.game.currentWord}</h2>\r\n          </div>\r\n        </form>\r\n        <a class=\"btn btn-lg btn-secondary\" href=\"/hangman\">\r\n          Back\r\n        </a>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOverComponent;\r\n","import \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport GameComponent from \"./component/GameComponent\";\nimport HomeComponent from \"./component/HomeComponent\";\nimport WordComponent from \"./component/WordComponent\";\nimport RankComponent from \"./component/RankComponent\";\nimport RankTopTen from \"./component/RankTopTen\";\nimport RankTopMonth from \"./component/RankTopMonth\";\nimport WinComponent from \"./component/WinComponent\";\nimport GameOverComponent from \"./component/GameOverComponent\";\n\nfunction App() {\n  return (\n    <main>\n      <switch>\n        <Route exact={true} path=\"/hangman\" component={HomeComponent}></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/rank\"\n          component={RankComponent}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/words\"\n          component={WordComponent}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/words(/:page)\"\n          name=\"page\"\n          component={WordComponent}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/games/:gameId\"\n          component={GameComponent}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/rank/topTen\"\n          component={RankTopTen}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/rank/topMonth\"\n          component={RankTopMonth}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/games/:gameId/win\"\n          component={WinComponent}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/hangman/games/:gameId/gameover\"\n          component={GameOverComponent}\n        ></Route>\n        {/* <Route\n          exact={true}\n          path=\"/hangman/logout\"\n          component={HomeComponent}\n        ></Route> */}\n        {/* <Route\n          exact={true}\n          path=\"/registration\"\n          component={RegistrationComponent}\n        ></Route>\n        <Route\n          exact={true}\n          path=\"/login\"\n          component={LogComponent}\n        ></Route> */}\n      </switch>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}